/*
 * main.c
 *
 *  Created on: Jun 11, 2018
 *      Author: arthur
 */

#include "xparameters.h"
//#include "xil_printf.h"
#include "sleep.h"
#include "stdio.h"
#include "PmodOLEDrgb.h"

#include "PmodESP32.h"

#ifdef __MICROBLAZE__
#define HOST_UART_DEVICE_ID XPAR_AXI_UARTLITE_0_BASEADDR
#define HostUart XUartLite
#define HostUart_Config XUartLite_Config
#define HostUart_CfgInitialize XUartLite_CfgInitialize
#define HostUart_LookupConfig XUartLite_LookupConfig
#define HostUart_Recv XUartLite_Recv
#define HostUartConfig_GetBaseAddr(CfgPtr) (CfgPtr->RegBaseAddr)
#include "xuartlite.h"
#include "xil_cache.h"
#else
#define HOST_UART_DEVICE_ID XPAR_PS7_UART_1_DEVICE_ID
#define HostUart XUartPs
#define HostUart_Config XUartPs_Config
#define HostUart_CfgInitialize XUartPs_CfgInitialize
#define HostUart_LookupConfig XUartPs_LookupConfig
#define HostUart_Recv XUartPs_Recv
#define HostUartConfig_GetBaseAddr(CfgPtr) (CfgPtr->BaseAddress)
#include "xuartps.h"
#endif

#define PMODESP32_UART_BASEADDR XPAR_PMODESP32_0_AXI_LITE_UART_BASEADDR
#define PMODESP32_GPIO_BASEADDR XPAR_PMODESP32_0_AXI_LITE_GPIO_BASEADDR

void EnableCaches();
void DisableCaches();
void DemoInitialize();
void displayDATA();
void DemoRun();
void DemoCleanup();
PmodOLEDrgb oledrgb;

PmodESP32 myESP32;
HostUart myHostUart;
int Pulse= 66;
float SpO2=10.6;
float temp = 45.6;
int main() {
	DemoInitialize();
	DemoRun();
	DemoCleanup();
	return 0;
}

void DemoInitialize () {
	HostUart_Config *CfgPtr;
	EnableCaches();
	ESP32_Initialize(&myESP32, PMODESP32_UART_BASEADDR, PMODESP32_GPIO_BASEADDR);
	CfgPtr = HostUart_LookupConfig(HOST_UART_DEVICE_ID);
	HostUart_CfgInitialize(&myHostUart, CfgPtr, HostUartConfig_GetBaseAddr(CfgPtr));
	OLEDrgb_begin(&oledrgb, XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_BASEADDR,
	         XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_BASEADDR);
}

void displayDATA() {
	int Pulse = 66;
	float SpO2 = 10.6;
	float temp = 45.6;

   OLEDrgb_Clear(&oledrgb);
   OLEDrgb_SetFontColor(&oledrgb, OLEDrgb_BuildRGB(255, 255, 255));
   OLEDrgb_SetCursor(&oledrgb, 1, 0);
   OLEDrgb_PutString(&oledrgb, "Temperature");
   OLEDrgb_SetCursor(&oledrgb, 2, 1);
   char tempStr[20];
   snprintf(tempStr, 20, "= %.1f", temp);
   OLEDrgb_PutString(&oledrgb, tempStr);
   OLEDrgb_PutString(&oledrgb, "^C");

   OLEDrgb_SetCursor(&oledrgb, 1, 3);
   OLEDrgb_PutString(&oledrgb, "SpO2=");
   char spo2Str[4];
   snprintf(spo2Str, 4, "%.1f", SpO2);
   OLEDrgb_PutString(&oledrgb, spo2Str);
   OLEDrgb_PutString(&oledrgb, "%");

   OLEDrgb_SetCursor(&oledrgb, 1, 5);
   OLEDrgb_PutString(&oledrgb, "Pulse=");
   char pulseStr[4];
   snprintf(pulseStr, 4, "%d", Pulse);
   OLEDrgb_PutString(&oledrgb, pulseStr);
   OLEDrgb_PutString(&oledrgb, "/m");

 //  sleep(5); // Wait 5 seconds
}
void DemoRun() {
    u8 reset_resp[32], mode_resp[32], conn_resp[128], recv_buffer[32];
    u32 num_received;
    // AT command for resetting ESP32
    unsigned char wifi_reset[] = "AT+RST\r\n";
    ESP32_SendBuffer(&myESP32, wifi_reset, strlen((char*)wifi_reset));
    xil_printf("Sent command: %s\n", wifi_reset);
    usleep(100000);
    // Receive response
    num_received = ESP32_Recv(&myESP32, reset_resp, sizeof(reset_resp));
    xil_printf("Received response: %s\n", reset_resp);
    usleep(100000);

    // AT command for setting Wi-Fi mode to Station
    unsigned char mode_cmd[] = "AT+CWMODE=1\r\n";
    ESP32_SendBuffer(&myESP32, mode_cmd, strlen((char*)mode_cmd));
    xil_printf("Sent command: %s\n", mode_cmd);
    usleep(100000);
    // Receive response
    num_received = ESP32_Recv(&myESP32, mode_resp, sizeof(mode_resp));
    xil_printf("Received response: %s\n", mode_resp);
    usleep(100000);

    // AT command for connecting to Wi-Fi
    unsigned char conn_cmd[] = "AT+CWJAP=\"TP-Link_A7A5\",\"98308866\"\r\n";
    ESP32_SendBuffer(&myESP32, conn_cmd, strlen((char*)conn_cmd));
    xil_printf("Sent command: %s\n", conn_cmd);
   usleep(1000000);
    // Receive response
    num_received = ESP32_Recv(&myESP32, conn_resp, sizeof(conn_resp));
    xil_printf("Received response:%s\n", conn_resp);
    usleep(5000000);
        num_received = ESP32_Recv(&myESP32, recv_buffer, sizeof(recv_buffer));

            xil_printf("Received response:%s\n", recv_buffer);

            if (strstr((const char*) recv_buffer, "WIFI CONNECTED") != NULL) {
                // Wi-Fi connection successful
                xil_printf("Wi-Fi connection successful!\r\n");
            }
            else if (strstr((const char*) recv_buffer, "WIFI DISCONNECTED") != NULL) {
                // Wi-Fi connection failed
                xil_printf("Wi-Fi connection failed!\r\n");
            }

            usleep(1000000);
     // AT commands to determine single connection mode
      unsigned char SMconMode[] = "AT+CIPMUX=0\r\n";
      ESP32_SendBuffer(&myESP32, SMconMode, strlen((char*)SMconMode));
      xil_printf("Sent command: %s\n", SMconMode);
      usleep(1000000);
      // AT command for TCP connection with Thingspeak server
      unsigned char TCP[] = "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n";
      ESP32_SendBuffer(&myESP32, TCP, strlen((char*)TCP));
      xil_printf("Sent command: %s\n", TCP);
      usleep(1000000);
      // Format the string with variables using sprintf
      unsigned char ch_upd[100];
      sprintf((char*)ch_upd, "GET /update?api_key=YUXWKBKVODTNYW0R&field1=%d&field2=%.1f&field3=%.1f\r\n", Pulse, SpO2, temp);
    //  unsigned char ch_upd[]="GET https://api.thingspeak.com/update?api_key=YUXWKBKVODTNYW0R&field1=80&field2=96.6&field3=36.6\r\n";
      int url_length = strlen((char*)ch_upd);
      unsigned char send_thing[50];
      sprintf((char*)send_thing, "AT+CIPSEND=%d\r\n", url_length);
      displayDATA();
      ESP32_SendBuffer(&myESP32, send_thing, strlen((char*)send_thing));
      usleep(1000000);
      ESP32_SendBuffer(&myESP32, ch_upd, strlen((char*)ch_upd));
      usleep(1000000);
     unsigned char Close_TCP[] = "AT+CIPCLOSE\r\n";
     ESP32_SendBuffer(&myESP32, Close_TCP, strlen((char*)Close_TCP));
     xil_printf("Sent command: %s\n", Close_TCP);
    return;
}

void DemoCleanup() {
	DisableCaches();
}



void EnableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheEnable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheEnable();
#endif
#endif
}

void DisableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheDisable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheDisable();
#endif
#endif
}
